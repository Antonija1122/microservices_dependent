sudo: required
services:
  - docker

env:
  global:
    - CHANGE_MINIKUBE_NONE_USER=true
    - MINIKUBE_WANTUPDATENOTIFICATION=false
    - MINIKUBE_WANTREPORTERRORPROMPT=false
    - MINIKUBE_HOME=$HOME
    - CHANGE_MINIKUBE_NONE_USER=true
    - KUBECONFIG=$HOME/.kube/config
    
before_install:
# In real-life we would do necessary setup/install here for real environment cli
# Download kubectl, which is a requirement for using minikube.
  - curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/v1.20.1/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
# Download minikube. 
  - curl -Lo minikube https://storage.googleapis.com/minikube/releases/v1.16.0/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/
  - mkdir -p $HOME/.kube $HOME/.minikube
  - touch $KUBECONFIG
  - sudo apt-get install -y conntrack
  - sudo minikube start --profile=minikube --vm-driver=none --kubernetes-version=v1.20.1
  - minikube update-context --profile=minikube
  - "sudo chown -R travis: /home/travis/.minikube/"
  - eval "$(minikube docker-env --profile=minikube)" && export DOCKER_CLI='docker'
  - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin


before_script:
  - docker build -t antonijaa/service1:test -f ./service1/Dockerfile ./service1
  - docker build -t antonijaa/service2:test -f ./service2/Dockerfile ./service2


script:
###unit testing
#https://www.udemy.com/course/pytest-python-3-unit-testing-tutorial-for-beginners/?utm_source=adwords&utm_medium=udemyads&utm_campaign=LongTail-New_la.EN_cc.ROWMTA-B&utm_content=deal4584&utm_term=_._ag_98771201205_._ad_521216183434_._kw__._de_c_._dm__._pl__._ti_dsa-1007766171312_._li_1007612_._pd__._&matchtype=b&gclid=CjwKCAjw47eFBhA9EiwAy8kzNI12bEwUxEm7RDcWdE-fhB7foYyAr54WrA2xijPok4cn9zQZll4SBRoCupcQAvD_BwE
#tests should be in directory /usr/app/test -in container 
#  - docker run -e CI=true antonijaa/service1:test python test
#  - docker run -e CI=true antonijaa/service2:test python test
  - echo "skipping unit tests"
  - echo "skipping integration tests"


before_script:
  #- docker build -t antonijaa/service1:test -f ./service1/Dockerfile ./service1
  #- docker build -t antonijaa/service2:test -f ./service2/Dockerfile ./service2
  - echo "druga skritpa build"

script:
###unit testing
#https://www.udemy.com/course/pytest-python-3-unit-testing-tutorial-for-beginners/?utm_source=adwords&utm_medium=udemyads&utm_campaign=LongTail-New_la.EN_cc.ROWMTA-B&utm_content=deal4584&utm_term=_._ag_98771201205_._ad_521216183434_._kw__._de_c_._dm__._pl__._ti_dsa-1007766171312_._li_1007612_._pd__._&matchtype=b&gclid=CjwKCAjw47eFBhA9EiwAy8kzNI12bEwUxEm7RDcWdE-fhB7foYyAr54WrA2xijPok4cn9zQZll4SBRoCupcQAvD_BwE
#tests should be in directory /usr/app/test -in container 
#  - docker run -e CI=true antonijaa/service1:test python test
#  - docker run -e CI=true antonijaa/service2:test python test
  - echo "skipping unit tests drugi"
  - echo "skipping integration tests drugi"
